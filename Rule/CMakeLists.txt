###
# #
###

string(TOUPPER ${CMAKE_CXX_COMPILER_ID} CMAKE_CXX_COMPILER_ID)
set (CPP_COMPILER ${CMAKE_CXX_COMPILER_ID}) 

# Include default compiler options
include(${CMAKE_SOURCE_DIR}/cfg/${CMAKE_CXX_COMPILER_ID}.cconf)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${${CMAKE_CXX_COMPILER_ID}_FLAGS}" CACHE STRING "Compiler flag" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_DEBUG}"	 CACHE STRING "Compiler flag debug" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_RELEASE}" CACHE STRING "Compiler flag release" FORCE)
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_RELWITHDEBINFO}" CACHE STRING "Compiler flag relase with debug info" FORCE)
set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} ${${CMAKE_CXX_COMPILER_ID}_FLAGS_MINSIZEREL}" CACHE STRING "Compiler flag mini size release" FORCE)
set(USEDCOMPILER ${CMAKE_CXX_COMPILER_ID})

STRING(REGEX REPLACE "." "_" DEFINE_OS_VERSION_NUMBER ${CMAKE_SYSTEM_VERSION})
STRING(REGEX REPLACE "." "_" DEFINE_OS_ARCH_TYPE ${CMAKE_SYSTEM_PROCESSOR})

set(FULL_OS_NAME "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}-${CMAKE_SYSTEM_PROCESSOR}")
add_definitions(-DOS_NAME="${CMAKE_SYSTEM_NAME}"
				-DOS_VERSION_NUMBER="${CMAKE_SYSTEM_VERSION}"
				-DOS_ARCH_TYPE="${CMAKE_SYSTEM_PROCESSOR}"
				-DFULL_OS_NAME="${FULL_OS_NAME}"
				-DPROJECT_NAME="${PROJECT_NAME}"
				-D${CMAKE_SYSTEM_NAME}
				-DVERSION_${DEFINE_OS_VERSION_NUMBER}
				-DARCH${DEFINE_OS_ARCH_TYPE})

set(CUSTOM_BIN_FOLDER "${CMAKE_SOURCE_DIR}/bin/${FULL_OS_NAME}/")

if (NOT DEFINED QT_VERSION)
	set(QT_VERSION "4" CACHE STRING "version de QT a utiliser" FORCE)
endif (NOT DEFINED QT_VERSION)

if (QT_VERSION EQUAL "4")

	FIND_PACKAGE(Qt4 REQUIRED)
	set(QT_USE_QTGUI TRUE)
	ADD_DEFINITIONS(${QT_DEFINITIONS})
	INCLUDE(${QT_USE_FILE})

else (QT_VERSION EQUAL "4")
	if (QT_VERSION EQUAL "5")

	FIND_PACKAGE(Qt5Gui REQUIRED)
	FIND_PACKAGE(Qt5Widgets REQUIRED)
	FIND_PACKAGE(Qt5Concurrent REQUIRED)
	include_directories(${Qt5Widgets_INCLUDE_DIRS})
	include_directories(${Qt5Gui_INCLUDE_DIRS})
	include_directories(${Qt5Concurrent_INCLUDE_DIRS})
	add_definitions(${Qt5Widgets_DEFINITIONS})
	add_definitions(${Qt5Gui_DEFINITIONS})
	add_definitions(${Qt5Concurrent_DEFINITIONS})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS} ${Qt5Concurrent_EXECUTABLE_COMPILE_FLAGS}")

	else (QT_VERSION EQUAL "5")
	endif (QT_VERSION EQUAL "5")
endif (QT_VERSION EQUAL "4")

#----------------------------------------
#-- INPUT/OUTPUT PATHS
#----------------------------------------
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${FULL_OS_NAME}/)

 # verifie que le generateur supporte les multiples configuration
if(CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DISTRIB  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DISTRIB  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
else(CMAKE_CONFIGURATION_TYPES)
	if(NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." FORCE)
	endif(NOT CMAKE_BUILD_TYPE)
endif(CMAKE_CONFIGURATION_TYPES)

#-----------------------------------------------------------------------------
# Macros

include_directories("${CMAKE_SOURCE_DIR}/externs/include/")
include_directories("${CMAKE_BINARY_DIR}")
# Set subdirectories to compile

include ("${CMAKE_SOURCE_DIR}/Rule/ImgConvert.cmake")

